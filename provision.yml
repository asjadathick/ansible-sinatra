---
  - name: Provision Sinatra Instance
    hosts: localhost
    gather_facts: False
    tags: provisioning
    # Necessary Variables for creating/provisioning the EC2 Instance
    vars:
      instance_type: t2.micro
      security_group: sinatra-webserver
      image: ami-01c2df5ce9bc2f573
      keypair: conf
      region: ap-southeast-2
      count: 1
      vpc_subnet_id: subnet-70ab2417
      assign_public_ip: yes

    # Task that will be used to Launch/Create an EC2 Instance
    tasks:

      - name: Create a security group
        local_action:
          module: ec2_group
          name: "{{ security_group }}"
          description: Security Group for webserver Servers
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
        register: basic_firewall

      - name: Launch the new EC2 Instance
        local_action: ec2
                      group={{ security_group }}
                      instance_type={{ instance_type}}
                      image={{ image }}
                      wait=true
                      region={{ region }}
                      keypair={{ keypair }}
                      count={{count}}
                      assign_public_ip={{assign_public_ip}}
                      vpc_subnet_id={{vpc_subnet_id}}
        register: ec2

      - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
        local_action: lineinfile
                      dest="./hosts"
                      regexp={{ ec2.instances[0].public_ip }}
                      insertafter="[webserver]" line={{ ec2.instances[0].public_ip }}
        with_items: ec2.instances


      - name: Wait for SSH to come up
        local_action: wait_for
                      host={{ ec2.instances[0].public_ip }}
                      port=22
                      state=started
        with_items: ec2.instances

      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ ec2.instances[0].id }} region={{ region }} state=present
        with_items: ec2.instances
        args:
          tags:
            Name: webserver
